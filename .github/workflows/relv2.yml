name: Release

on:
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        job: [lint, test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install dependencies
        run: npm install

      - name: Run lint
        if: matrix.job == 'lint'
        run: npm run lint

      - name: Run tests
        if: matrix.job == 'test'
        run: npm run test

  create-release-branch:
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Create release branch
        run: |
          git checkout -b releases/${{ github.run_number }}
          git push origin releases/${{ github.run_number }}

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: create-release-branch
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: releases/${{ github.run_number }}

      - name: Log in to Container Registry
        run: echo "${{ secrets.YANDEX_TOKEN }}" | docker login --username oauth --password-stdin cr.yandex

      - name: Build and push Docker
        run: |
          docker build -t cr.yandex/${{ vars.CR_ID }}/app:${{ env.RELEASE_VERSION }} -t cr.yandex/${{ vars.CR_ID }}/app:${{ env.RELEASE_VERSION }}_latest .
          docker push cr.yandex/${{ vars.CR_ID }}/app --all-tags

  create-github-tag:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create GitHub tag
        run: |
          git fetch --all
          git tag ${ { github.run_number }} origin/main
          git push origin ${ { github.run_number }}

  create-release-issue:
    runs-on: ubuntu-latest
    needs: create-github-tag
    steps:
      - name: Get previous release tag
        id: prev_tag
        run: echo "::set-output name=prev_tag::$(git describe --tags --abbrev=0 HEAD^1)"

      - name: Get commits since previous tag
        id: commits
        run: echo "::set-output name=commits::$(git log ${ { steps.prev_tag.outputs.prev_tag }}..HEAD --pretty=format:'%h - %s')"

      - name: Create GitHub Issue
        uses: peter-evans/create-issue-from-file@v3
        with:
          title: Release ${{ github.run_number }}
          content: |
            **Release date:** ${{ github.event.date }}
            **Author:** ${{ github.actor }}
            **Version:** ${{ github.run_number }}
            **Commits since last release:** 
            ${{ steps.commits.outputs.commits }}
            **Docker image:** [cr.yandex/${{ vars.CR_ID }}/app:${{ github.run_number }}](cr.yandex/${{ vars.CR_ID }}/app:${{ github.run_number }})

  update-changelog:
    runs-on: ubuntu-latest
    needs: create-release-issue
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get previous release tag
        id: prev_tag
        run: echo "::set-output name=prev_tag::$(git describe --tags --abbrev=0 HEAD^1)"

      - name: Get commits since previous tag
        id: commits
        run: echo "::set-output name=commits::$(git log ${ { steps.prev_tag.outputs.prev_tag }}..HEAD --pretty=format:'- %s')"

      - name: Update CHANGELOG.md
        run: |
          echo "## ${{ github.run_number }} - $(date +'%Y-%m-%d')" > tmpfile
          echo "${ { steps.commits.outputs.commits }}" >> tmpfile
          echo "" >> tmpfile
          cat CHANGELOG.md >> tmpfile
          mv tmpfile CHANGELOG.md

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG.md for release ${{ github.run_number }}"
          git push origin main
