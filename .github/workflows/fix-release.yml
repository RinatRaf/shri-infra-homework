name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version to fix"
        required: true

jobs:
  checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: [lint, test]
        node-version: [20.x]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - run: npm install

      - if: matrix.task == 'lint'
        run: npm run lint

      - if: matrix.task == 'test'
        run: npm run test
  release:
    needs: [checks]
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v3

      - name: Get release version
        id: get_version
        run: |
          echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Get fix version
        id: get_fix_version
        run: echo "FIX_VERSION=${{ github.run_number }}" >> $GITHUB_ENV

      - name: Checkout release branch
        run: |
          git checkout -b releases/${{ env.RELEASE_VERSION }}

      - name: Log in to Container Registry
        run: echo "${{ secrets.YANDEX_TOKEN }}" | docker login --username oauth --password-stdin cr.yandex

      - name: Build and push Docker
        run: |
          docker build -t cr.yandex/${{ vars.CR_ID }}/app:${{ env.RELEASE_VERSION }}__fix${{ env.FIX_VERSION }} -t cr.yandex/${{ vars.CR_ID }}/app:${{ env.RELEASE_VERSION }}_latest .
          docker push cr.yandex/${{ vars.CR_ID }}/app --all-tags

      - name: Configure Git
        run: |
          git config --global user.email "rinat.rafikov5@yandex.ru"
          git config --global user.name "rinatRafikov"

      - name: Get previous release tag
        id: get_prev_tag
        run: echo "PREV_TAG=$( git ls-remote --tags origin | tail -2 | head -1 | sed 's/.*\///')" >> $GITHUB_ENV

      - name: Create fix tag
        run: |
          git tag -a v${{ env.RELEASE_VERSION }}_fix${{ env.FIX_VERSION }} -m "fix release ${{ env
          .RELEASE_VERSION}}_fix${{ env.FIX_VERSION }}"
          git push origin v${{ env.RELEASE_VERSION }}_fix${{ env.FIX_VERSION }}

      - name: Get previous tag commits
        id: get_commit_list
        run: |
          git fetch
          git branch --set-upstream-to origin/v${{ env.RELEASE_VERSION }}_fix${{ env.FIX_VERSION }}
          echo "COMMITS=$(git log ${{ env.PREV_TAG }}..v${{ env.RELEASE_VERSION }}_fix${{ env.FIX_VERSION }} --pretty=format:"%h - %an, %ar : %s")" >> $GITHUB_ENV

      - name: Set date as env variable
        run: echo "NOW=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_ENV

      - name: Create release issue
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh issue create --title "Release v${{ env.RELEASE_VERSION }}" --body "Date: ${{ env.NOW }}<br>Author: ${{ github.triggering_actor }}<br>Version: ${{ github.run_number }}<br>Commits:<br>${{ env.COMMITS }}<br>YC Docker: cr.yandex/${{ vars.CR_ID }}/app:${{ env.RELEASE_VERSION }}"
